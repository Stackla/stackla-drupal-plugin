<?php

/**
 * @file: Stackla Base module functions.
 */

/**
 * Implements hook_libraries_info().
 */
function stackla_libraries_info() {

  $libraries['stackla'] = array(
    'name' => 'Stackla',
    'vendor url' => 'http://stackla.com/',
    'download url' => 'http://stackla.com/api',
    'version' => 1,
    'files' => array(
      'php' => array('vendor/autoload.php'), //this can be a path to the file location like array('lib/simple.js')
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function stackla_menu() {
  $items = array();

  $items['admin/config/services/stackla'] = array(
    'title' => 'Stackla',
    'description' => 'Configure Stackla integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stackla_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer stackla'),
    'file' => 'stackla.admin.inc',
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM
  );

  $items['admin/config/services/stackla/test'] = array(
    'title' => 'Stackla: Test SDK integration',
    'description' => 'Test Stackla integration',
    'page callback' => 'stackla_test_api',
    'page arguments' => array('stackla_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer stackla'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM
  );

  $items['admin/config/services/stackla/accesscallback'] = array(
    'title' => 'Stackla: Access Callback',
    'description' => 'Callback for Stackal Oauth',
    'page callback' => 'stackla_outh_callback',
    'page arguments' => array('stackla_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer stackla'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function stackla_permission() {
  return array(
    'administer stackla' => array(
      'title' => t('Administer stackla'),
      'description' => t('Configure stackla module'),
    ),
  );
}

/**
 * Callback for a page to test API connectivity.
 */
function stackla_test_api() {
  $output = array();

//@todo: write something meaningful here.
  return $ouput;
}

/**
 * Callback for Oauth authentication.
 */
function stackla_outh_callback() {
  libraries_load('stackla');
  $output = array();

  $access_code = $_GET['code'];
  $client_id = variable_get('stackla_client_id');
  $host = variable_get('stackla_stack_oauth_host');
  $stack = variable_get('stackla_stack_name');
  $client_secret = variable_get('stackla_client_secret');
  $callback = 'http://' . $_SERVER['HTTP_HOST'] . '/admin/config/services/stackla/accesscallback';

  $credentials = new Stackla\Core\Credentials($host, null, $stack);
  $response = $credentials->generateToken($client_id, $client_secret, $access_code, $callback);

  if ($response === false) {
    drupal_set_message(t('Failed creating access token.'), 'error');
  }
  else {
    stackla_set_access_token($credentials->token);
    drupal_set_message(t('Successfully created access token'), 'status');
  }
  drupal_goto('admin/config/services/stackla');
}

/**
 * Check Stacka authentication.
 *
 * @return bool
 *  TRUE if authenticated.
 */
function stackla_is_authenticated() {
  if (stackla_get_access_token()) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Retrieve Stackla access token.
 *
 *  @return string
 *    The access token string or FALSE if not present.
 */
function stackla_get_access_token() {
  $encrypted_token =  variable_get('stackla_access_token');
  if($encrypted_token) {
    return decrypt($encrypted_token);
  }
  else {
    return FALSE;
  }
}

/**
 * Set Stackla access token.
 *  @param string $token
 *    The token string to set.
 *  @return boolean
 *    TRUE if successful.
 */
function stackla_set_access_token($token) {
  //@todo: add 2 way encryption
  $encrypted_token = encrypt($token);
  variable_set('stackla_access_token', $encrypted_token);
  return TRUE;
}
