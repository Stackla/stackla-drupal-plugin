<?php

/**
 * @file: Stackla Field functions.
 */

/**
 * Implements hook_field_info().
 */
function stackla_field_field_info() {
  $data = array(
    'stackla_field' => array(
      'label' => t('Stackla Widget'),
      'description' => t('Stackla Widget'),
      'default_widget' => 'stackla_field_widget',
      'default_formatter' => 'stackla_field_widget_formatter',
    ),
  );
  return $data;
}

/**
 * Implements hook_field_widget_info().
 */
function stackla_field_field_widget_info() {
  return array(
    'stackla_field_widget' => array(
      'label' => t('Stackla Field widget'),
      'field types' => array('stackla_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function stackla_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['widget_data']) ? unserialize($items[$delta]['widget_data']) : array();
  $widget = $element;
  $widget['#delta'] = $delta;

  if ($instance['widget']['type'] == 'stackla_field_widget') {

    $widget += array(
      '#type' => 'fieldset',
      '#element_validate' => array('stackla_field_element_validate'),
      // #delta is set so that the validation function will be able
      // to access external value information which otherwise would be
      // unavailable.
      '#delta' => $delta,
      '#prefix' => '<div id="st-fieldset">',
      '#suffix' => '</div>',
    );


    $widget['name'] = array(
      '#type' => 'textfield',
      '#title' => t('The title for your stackla widget'),
      '#default_value' => (!empty($value['name'])) ? $value['name'] : '',
    );

    if (!empty($value['tag_id'])) {
      $widget['tag_id'] = array(
        '#type' => 'hidden',
        '#value' => $value['tag_id'],
      );
    }

    $widget['terms'] = array(
      '#type' => 'fieldset',
      '#title' => t('Create Terms'),
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
    );

    $field_name = $field['field_name'];
    if (!empty($form_state['values'][$field_name]['und'][$delta]['widget_data'])) {
      $submitted_data = unserialize($form_state['values'][$field_name]['und'][$delta]['widget_data']);
      $social_elements = stackla_field_term_elements($submitted_data, $form_state);
      $filter_elements = stackla_field_filters($submitted_data, $form_state);
      $look_and_feel = stackla_field_look_elements($submitted_data, $form_state);
    }
    else {
      $social_elements = stackla_field_term_elements($value, $form_state);
      $filter_elements = stackla_field_filters($value, $form_state);
      $look_and_feel = stackla_field_look_elements($value, $form_state);
    }
    $widget['terms'] += $social_elements;

    $widget['filter_menu'] = array(
      '#type' => 'fieldset',
      '#title' => 'Create Filters',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
    );

    $widget['filter_menu'] += $filter_elements;

    $widget['look_and_feel'] = array(
      '#type' => 'fieldset',
      '#title' => 'Look and Feel',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
    );

    $widget['look_and_feel'] += $look_and_feel;
  }

  $element['widget_data'] = $widget;
  return $element;
}

/**
 * Generate field widget 'look and feel'
 * @param type $data
 * @param type $form_state
 * @return type
 */
function stackla_field_look_elements($data, $form_state) {
  $elements = array();

  $elements['look_options'] = array(
    '#type' => 'radios',
    '#options' => array(
      'new' => t('Create a new Stackla widget'),
      'derive' => t('Derive an existing Stackla widget'),
      'clone' => t('Clone an existing Stackla widget'),
    ),
    '#default_value' => (!empty($data['look_and_feel']['look_options'])) ? $data['look_and_feel']['look_options'] : '',
    '#name' => 'widget_radios',
    '#ajax' => array(
      'callback' => 'stackla_field_ajax_widget_callback',
      'wrapper' => 'st-fieldset',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  if (!empty($data['look_and_feel']['stackla_id'])) {
    $elements['stackla_id'] = array(
      '#type' => 'hidden',
      '#value' => $data['look_and_feel']['stackla_id'],
    );

    $elements['embed_code'] = array(
      '#type' => 'hidden',
      '#value' => $data['look_and_feel']['embed_code'],
    );
  }

  if (!empty($data['look_and_feel']['look_options'])) {
    $elements['details'] = stackla_field_widget_details($data['look_and_feel']);
  }

  return $elements;
}

function stackla_field_widget_details($look_and_feel) {
  $elements = array();

  switch ($look_and_feel['look_options']) {
    case 'new':
      // Type is limited to fluid for this version.

      $style_options = array(
        'fluid' => t('Vertical Fluid'),
        'horizontal-fluid' => t('Horizontal Fluid'),
      );
      $elements['type_style'] = array(
        '#title' => t('Style'),
        '#type' => 'select',
        '#options' => $style_options,
      );

      break;
  }

  return $elements;
}

/**
 * Generate the filters widget form elements.
 * @param array $values
 *  the existing filter values
 * @param type $form_state
 *  The drupal $form_state (with'values' if this is an ajax rebuild).
 * @return string
 */
function stackla_field_filters($values, $form_state) {
  $elements = array();

  $highest_key = 0;

  // Check if a 'remove' button has been clicked
  $remove_index = 'empty';
  if (!empty($form_state['clicked_button'])) {
    $name_elements = explode('-', $form_state['clicked_button']['#name']);
    if ($name_elements[0] == 'filter') {
      $remove_index = intval($name_elements[2]);
    }
  }

  if (!empty($values['filter_menu'])) {
    $new_key = 0;
    foreach ($values['filter_menu'] as $key => $filter) {
      if ($new_key > $highest_key) {
        $highest_key = $new_key;
      }
      if (!empty($filter['title'])) {
        if ($key !== $remove_index) {
          $elements += stackla_field_filter_element($new_key, $filter);

          $new_key++;
        }
        else {
          // Remove button has been clicked, set up hidden fields
          $elements += stackla_field_filter_elements_remove($new_key, $filter);
        }
      }
    }
  }

  if (empty($elements[$highest_key]['title']['#default_value'])) {
    $elements += stackla_field_filter_element($highest_key, array());
  }

  $highest_key ++;
  $elements[$highest_key]['add_new'] = array(
    '#type' => 'button',
    '#value' => t('Add new filter'),
    '#name' => 'filter_add_new',
    '#ajax' => array(
      'callback' => 'stackla_field_ajax_widget_callback',
      'wrapper' => 'st-fieldset',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $elements;
}

/**
 * Set up widget filter elements for items that have been flagged for
 * removal.
 */
function stackla_field_filter_elements_remove($key, $filter) {
  $elements = array();

  $elements[$key] = array();

  //title
  $elements[$key]['title'] = array(
    '#type' => 'hidden',
    '#value' => (!empty($filter['title'])) ? $filter['title'] : '',
  );

  $elements[$key]['remove_flag'] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );

  if (!empty($filter['stackla_id'])) {
    $elements[$key]['stackla_id'] = array(
      '#type' => 'hidden',
      '#value' => $filter['stackla_id'],
    );
  }

  return $elements;
}

/**
 *  Generate a single filter form element.
 * @param string $key
 *  the delta key
 * @param array $filter
 *  existing filter data (for populating default form values).
 * @return array
 *  the complete form element render array.
 */
function stackla_field_filter_element($key, $filter) {
  $elements = array();

  if (!empty($filter['remove_flag'])) {
    $elements = stackla_field_filter_elements_remove($key, $filter);
  }
  else {
    $elements[$key] = array(
      '#type' => 'fieldset',
    );

    //title
    $elements[$key]['title'] = array(
      '#title' => t('Title'),
      '#type' => 'textfield',
      '#default_value' => (!empty($filter['title'])) ? $filter['title'] : '',
    );


    //sort by
    $elements[$key]['sort'] = array(
      '#type' => 'select',
      '#options' => array(
        'source_created_at_desc' => t('Latest'),
        'score_desc' => t('Greatest'),
        'votes_desc' => t('Votes'),
        'random' => t('Random'),
      ),
      '#default_value' => (!empty($filter['sort'])) ? $filter['sort'] : '',
    );

    // show media
    $elements[$key]['show_media'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Show Media'),
      '#options' => array(
        'text' => t('Text only'),
        'image' => t('Images'),
        'video' => t('Video'),
      ),
      '#default_value' => (!empty($filter['show_media'])) ? $filter['show_media'] : array(),
    );

    // networks
    // @todo: limit these to networks chosen in terms.
    $elements[$key]['networks'] = array(
      '#title' => t('Networks'),
      '#type' => 'checkboxes',
      '#options' => array(
        'twitter' => t('Twitter'),
        'instagram' => t('Instagram'),
        'facebook' => t('Facebook'),
        'gplus' => t('Google+'),
        'youtube' => t('YouTube'),
      ),
      '#default_value' => (!empty($filter['networks'])) ? $filter['networks'] : array(),
    );

    if (!empty($filter['stackla_id'])) {
      $elements[$key]['stackla_id'] = array(
        '#type' => 'hidden',
        '#value' => $filter['stackla_id'],
      );
    }

    //If there is data, add a 'remove' button.
    if (!empty($filter)) {
      $elements[$key]['remove'] = array(
        '#type' => 'button',
        '#value' => t('Remove filter'),
        '#name' => 'filter-remove-' . $key,
        '#ajax' => array(
          'callback' => 'stackla_field_ajax_widget_callback',
          'wrapper' => 'st-fieldset',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    }
  }

  return $elements;
}

/**
 * Build social form elements from existing data.
 * @param array $values
 */
function stackla_field_term_elements($values, $form_state) {

  $term_types = array(
    'user' => array(
      'name' => t('User'),
      'prefix' => '@',
    ),
    'hashtag' => array(
      'name' => t('Hashtag'),
      'prefix' => '#'
    ),
    'page' => array(
      'name' => t('Page'),
      'prefix' => NULL,
    ),
    'search' => array(
      'name' => t('Search'),
      'prefix' => NULL,
    ),
  );


  $social_networks = array(
    'twitter' => array(
      'name' => t('Twitter'),
      'types' => array(
        'user',
        'hashtag',
        'search')
    ),
    'instagram' => array(
      'name' => t('Instagram'),
      'types' => array('hashtag', 'user'),
    ),
    'youtube' => array(
      'name' => t('YouTube'),
      'types' => array('user', 'search'),
    ),
    'facebook' => array(
      'name' => t('Facebook'),
      'types' => array('page'),
    ),
    'gplus' => array(
      'name' => t('Google+'),
      'types' => array('user'),
    ),
  );

  $network_options = array();

  foreach ($social_networks as $social_key => $social_network) {
    $network_options[$social_key] = $social_network['name'];
  }

  $initial_network_options = array(
    '0' => t('Select Network...'),
  );
  $initial_network_options += $network_options;

  // Check if a 'remove' button has been clicked
  $remove_index = 'empty';
  if (!empty($form_state['clicked_button'])) {
    $name_elements = explode('-', $form_state['clicked_button']['#name']);
    if ($name_elements[0] == 'social') {
      $remove_index = intval($name_elements[2]);
    }
  }

  $elements = array();
  $highest_key = 0;
  if (!empty($values['terms'])) {
    foreach ($values['terms'] as $key => $query) {
      if ($key > $highest_key) {
        $highest_key = $key;
      }
      if (!empty($query['remove_flag'])) {
        $elements[$key]['remove_flag'] = array(
          '#type' => 'hidden',
          '#value' => 1,
        );
        $elements[$key]['name'] = array(
          '#type' => 'hidden',
          '#value' => (!empty($query['name'])) ? $query['name'] : '',
        );

        // Hidden field for stackla id if present
        if (!empty($query['stackla_id'])) {
          $elements[$key]['stackla_id'] = array(
            '#type' => 'hidden',
            '#value' => $query['stackla_id'],
          );
        }
      }
      elseif (!empty($query['network']) && $query['network'] != '0') {
        if ($key !== $remove_index) {
          $elements[$key] = array(
            '#type' => 'fieldset',
          );

          if (!empty($query['type'])) {
            $elements[$key]['name'] = array(
              '#title' => t('Term name'),
              '#type' => 'textfield',
              '#default_value' => (!empty($query['name'])) ? $query['name'] : '',
            );
          }

          // If the term has been created in Stackla, the network should no longer be
          // editable.
          if (!empty($query['stackla_id'])) {
            $elements[$key]['network'] = array(
              '#type' => 'hidden',
              '#value' => (!empty($query['network'])) ? $query['network'] : 0,
            );
            $elements[$key]['network_display'] = array(
              '#type' => 'markup',
              '#markup' => t('Network: @network', array(
                '@network' => (!empty($query['network'])) ? $network_options[$query['network']] : 0,
              )),
              '#prefix' => '<p>',
              '#suffix' => '</p>',
            );
          }
          else {
            $elements[$key]['network'] = array(
              '#type' => 'select',
              '#options' => $network_options,
              '#default_value' => (!empty($query['network'])) ? $query['network'] : 0,
              '#ajax' => array(
                'callback' => 'stackla_field_ajax_widget_callback',
                'wrapper' => 'st-fieldset',
                'method' => 'replace',
                'effect' => 'fade',
              ),
            );
          }

          $type_options = array();
          foreach ($social_networks[$query['network']]['types'] as $type_index) {
            $type_options[$type_index] = $term_types[$type_index]['name'];
          }

          // If the type is not yet selected, put an explanatory option in there.
          if (empty($query['type'])) {
            $type_options = array('Select type') + $type_options;
          }

          if (!empty($query['stackla_id'])) {
            $elements[$key]['type'] = array(
              '#type' => 'hidden',
              '#value' => (!empty($query['type'])) ? $query['type'] : 0,
            );

            $elements[$key]['type_display'] = array(
              '#type' => 'markup',
              '#markup' => t('Type: @type', array(
                '@type' => (!empty($query['type'])) ? $type_options[$query['type']] : 0,
              )),
              '#prefix' => '<p>',
              '#suffix' => '</p>',
            );
          }
          else {
            $elements[$key]['type'] = array(
              '#type' => 'select',
              '#options' => $type_options,
              '#default_value' => (!empty($query['type'])) ? $query['type'] : 0,
              '#ajax' => array(
                'callback' => 'stackla_field_ajax_widget_callback',
                'wrapper' => 'st-fieldset',
                'method' => 'replace',
                'effect' => 'fade',
              ),
            );
          }

          // Only show these fields after the type has been selected.
          if (!empty($query['type'])) {
            //
            $value_field_title = t('@network @type:', array(
              '@network' => $social_networks[$query['network']]['name'],
              '@type' => $term_types[$query['type']]['name'],
            ));
            $elements[$key]['value'] = array(
              '#title' => $value_field_title,
              '#type' => 'textfield',
              '#default_value' => (!empty($query['value'])) ? $query['value'] : '',
            );
            if (empty($query['value'])) {
              $elements[$key]['value']['#attributes'] = array(
                'placeholder' => t('Enter value'),
              );
            }


            if (empty($query['name'])) {
              $elements[$key]['name']['#attributes'] = array(
                'placeholder' => t('Enter a name for your term'),
              );
            }
          }

          // Hidden field for stackla id if present
          if (!empty($query['stackla_id'])) {
            $elements[$key]['stackla_id'] = array(
              '#type' => 'hidden',
              '#value' => $query['stackla_id'],
            );
          }



          $elements[$key]['remove'] = array(
            '#type' => 'button',
            '#value' => t('Remove'),
            '#name' => 'social-remove-' . $key,
            '#ajax' => array(
              'callback' => 'stackla_field_ajax_widget_callback',
              'wrapper' => 'st-fieldset',
              'method' => 'replace',
              'effect' => 'fade',
            ),
          );
        }
        else {
          // We only need to flag for deletion if the term has already been
          // created in stackla.
          if (!empty($query['stackla_id'])) {
            $elements[$key]['remove_flag'] = array(
              '#type' => 'hidden',
              '#value' => 1,
            );
            $elements[$key]['name'] = array(
              '#type' => 'hidden',
              '#value' => (!empty($query['name'])) ? $query['name'] : '',
            );
            $elements[$key]['stackla_id'] = array(
              '#type' => 'hidden',
              '#value' => $query['stackla_id'],
            );
          }
        }
      }
    }
  }

  $new_select = array(
    'network' => array(
      '#type' => 'select',
      '#options' => $initial_network_options,
      '#default_value' => 0,
      //'#name' => 'stackla_social_new',
      '#ajax' => array(
        'callback' => 'stackla_field_ajax_widget_callback',
        'wrapper' => 'st-fieldset',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    ),
  );
  $elements[$highest_key + 1] = $new_select;

  return $elements;
}

/**
 * Ajax callback for widget form.
 */
function stackla_field_ajax_widget_callback($form, &$form_state) {
  // gets an array of the path of the triggering element.
  $parents = $form_state['triggering_element']['#array_parents'];

  // removes the triggering element name.
  array_pop($parents);
  array_pop($parents);
  array_pop($parents);

  // turns the array into a path on $form - i.e. $form['field_name']['und'][0]['your_element_name'];
  $element = drupal_array_get_nested_value($form, $parents);
  return $element;
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function stackla_field_field_is_empty($item, $field) {
  return empty($item['widget_data']);
}

/**
 * Implements hook_field_validate().
 */
function stackla_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['widget_data'])) {
      //@todo: validate field data.
    }
  }
}

/**
 * Field element validation.
 */
function stackla_field_element_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  // Trying to add a new filter or query without setting the node name will
  // trigger a validation error.
  // Hack around this by setting the node title to the same as the widget title
  // if it's not already set.
  $errors = form_get_errors();
  if (!empty($errors['title']) && !empty($form_state['values'][$field_name][$element['#language']][$delta]['widget_data']['name'])) {
    stackla_field_filter_errors('title');
    $form_state['values']['title'] = $form_state['values'][$field_name][$element['#language']][$delta]['widget_data']['name'];
  }
  // Serialise the form data for storage.
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['widget_data'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['widget_data'];
    $value = serialize($values);
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Helper function, filter reset form errors for a specific message.
 *  @param string $element_name
 *    The name of the element to filter.
 */
function stackla_field_filter_errors($element_name) {
  $errors = form_get_errors();
  if ($errors) {
    // Clear errors.
    form_clear_error();
    // Clear error messages.
    $error_messages = drupal_get_messages('error');
    // Initialize an array where removed error messages are stored.
    $removed_messages = array();

    // Remove all errors originated by the 'foo][bar' element.
    foreach ($errors as $name => $error_message) {
      if ($name == $element_name) {
        $removed_messages[] = $error_message;
        unset($errors[$name]);
      }
    }

    // Reinstate remaining errors.
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
      // form_set_error() calls drupal_set_message(), so we have to filter out
      // these from the error messages as well.
      $removed_messages[] = $error;
    }

    // Reinstate remaining error messages (which, at this point, are messages that
    // were originated outside of the validation process).
    foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function stackla_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'stackla_field_widget_formatter' => array(
      'label' => t('Stackla widget'),
      'field types' => array('stackla_field'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function stackla_field_theme($existing, $type, $theme, $path) {
  return array(
    'stackla_field' => array(
      'variables' => array(
        'data' => array(),
        'field_id' => 0,
      ),
      'template' => 'templates/stackla_field'
    ),
    'stackla_field_filters' => array(
      'variables' => array(
        'filters' => array(),
        'field_id' => 0,
        'widget_id' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_stackla_field().
 */
function stackla_field_preprocess_stackla_field(&$vars) {
  if (!empty($vars['data']['filter_menu'])) {
    $vars['filters'] = array(
      '#theme' => 'stackla_field_filters',
      '#filters' => $vars['data']['filter_menu'],
      '#field_id' => $vars['field_id'],
    );
  }
  drupal_add_css(drupal_get_path('module', 'stackla_field') . '/css/stackla_field.css');
}

/**
 * Filters list theme function.
 */
function theme_stackla_field_filters($variables) {
  $output = array();
  $list_class = '.stackla-filter-list.stackla-id-' . $variables['field_id'];
  $js = 'jQuery(\'' . $list_class . ' a\').click(function(){
    var filter = $(this).parent();
    StacklaFluidWidget.changeFilter(window.widgetId, filter.attr(\'data-filter\'));
});';


  $filters = $variables['filters'];
  $filter_list_elements = array();
  foreach ($filters as $delta => $filter) {
    if (!empty($filter['title'])) {
      // Generate a random filter id for now, replace this with actual data
      // once the SDK is available.
      $filter_id = $delta;

      // We don't use l() here because we don't want an href attribute on the
      // <a> tag.
      $filter_list_elements[] = sprintf('<a data-filter-id="%s">%s</a>', $filter_id, t($filter['title'])
      );
    }
  }
  if (!empty($filter_list_elements)) {
    $output = array(
      '#theme' => 'item_list',
      '#items' => $filter_list_elements,
      '#attributes' => array(
        'class' => array('stackla-filter-list stackla-id-' . $variables['field_id']), //add id here!
      ),
      // add attached js here.
      '#attached' => array(
        'js' => array(
          $js => array(
            'type' => 'inline',
            'scope' => 'footer',
          ),
        ),
        'css' => array(drupal_get_path('module', 'stackla_field') . '/css/stackla_field_filters.css'),
      ),
    );
  }

  $rendered_output = drupal_render($output);
  return $rendered_output;
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function stackla_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $entity_id = entity_extract_ids($entity_type, $entity);
  $element = array();

  switch ($display['type']) {
    // Stackla field outputter.
    case 'stackla_field_widget_formatter':
      foreach ($items as $delta => $item) {
        $data = unserialize($item['widget_data']);
        $element[$delta] = array(
          '#theme' => 'stackla_field',
          '#data' => $data,
          '#field_id' => $entity_id[0] . $delta,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_update().
 */
function stackla_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {

  $field_name = $field['field_name'];
  $original_data = array();
  foreach ($entity->original->{$field_name}[$entity->language] as $entity_widget_delta => $entity_widget) {
    $original_data[$entity_widget_delta] = unserialize($entity_widget['widget_data']);
  }

  foreach ($items as $item_delta => $item) {
    $data = unserialize($item['widget_data']);

    // Compare terms in new data to original, call stackla if required.
    if (!empty($data['terms'])) {
      foreach ($data['terms'] as $term_delta => $term) {
        // First check for a remove flag, and remove if required.
        if (!empty($term['remove_flag'])) {
          if (!empty($term['stackla_id'])) {
            // remove the term
            if (stackla_delete_term($term['stackla_id'])) {
              drupal_set_message(t('Term @term has been deleted', array(
                '@term' => $term['name'],
                  )), 'status');
              unset($data['terms'][$term_delta]);
            }
            else {
              drupal_set_message(t('Failed to delete @term', array(
                '@term' => $term['name'],
                  )), 'error');
            }
          }
          else {
            // No stackla id set, so just remove locally.
            unset($data['terms'][$term_delta]);
          }
        }

        // if the term is complete but does not have a stackla_id, create a new
        // term in stackla.
        elseif (empty($term['stackla_id']) && stackla_field_term_data_validate($term)) {
          $term['tag_id'] = $data['tag_id'];
          $new_term = stackla_create_term($term);
          if ($new_term->id) {
            drupal_set_message(t('Term @term created in Stackla', array(
              '@term' => $term['name'],
            )));
            $data['terms'][$term_delta]['stackla_id'] = $new_term->id;
          }
          else {
            $error = $new_term->getErrors();
            drupal_set_message(t('Unable to create @term, @message', array(
              '@term' => $term['name'],
              '@message' => check_plain(implode(', ', $error)),
                )), 'error');
          }
        }
        elseif (!empty($original_data[$item_delta]['terms'][$term_delta])) {
          $original_term = $original_data[$item_delta]['terms'][$term_delta];
          if ($term != $original_term) {
            if (!empty($original_term['stackla_id'])) {
              if ($updated_term = stackla_update_term($term, $original_term)) {
                drupal_set_message(t('Term @term updated in Stackla', array(
                  '@term' => $term['name'],
                )));
              }
            }
          }
        }
      }
    }

    // Compare filters in new data to original, call stackla  if required.
    // Note we'll probably have to have some kind of sync/collision stuff in
    // here at some point.
    if (!empty($data['filter_menu'])) {
      foreach ($data['filter_menu'] as $filter_delta => $filter) {
        if (!empty($filter['remove_flag'])) {
          if (!empty($filter['stackla_id'])) {
            // remove the term
            if (stackla_delete_filter($filter['stackla_id'])) {
              drupal_set_message(t('Filter @filter has been deleted', array(
                '@filter' => $filter['title'],
                  )), 'status');
              unset($data['filter_menu'][$filter_delta]);
            }
            else {
              drupal_set_message(t('Failed to delete @filter', array(
                '@filter' => $filter['title'],
                  )), 'error');
            }
          }
          else {
            // No stackla id set, so just remove locally.
            unset($data['filter_menu'][$filter_delta]);
          }
        }
        elseif (empty($filter['stackla_id'])) {
          // the filter does not have a stackla id, so
          // we need to create a new filter in stackla.
          if (stackla_field_filter_validate($filter)) {
            $filter['tag_id'] = $data['tag_id'];
            $new_filter = stackla_field_create_filter($filter);
            if ($new_filter->id) {
              $data['filter_menu'][$filter_delta]['stackla_id'] = $new_filter->id;
            }
          }
        }
        elseif (!empty($original_data[$item_delta]['filter_menu'][$filter_delta])) {
          $filter['tag_id'] = $data['tag_id'];
          $original_filter = $original_data[$item_delta]['filter_menu'][$filter_delta];
          if ($filter != $original_filter) {
            $stackla_filter = stackla_field_prepare_filter($filter);
            if ($updated_filter = stackla_update_filter($stackla_filter, $original_filter)) {
              drupal_set_message(t('Filter @filter updated in Stackla', array(
                '@filter' => $filter['title'],
              )));
            }
          }
        }
      }
    }

    //Widget!
    if (!empty($data['look_and_feel']) && !empty($data['look_and_feel']['look_options'])) {
      if (empty($data['look_and_feel']['stackla_id'])) {
        // No stackla id, so we need to create a new widget.
        $new_widget = stackla_field_create_stackla_widget($data);
        if ($new_widget->id) {
          drupal_set_message(t('Created Widget @name in Stackla', array(
            '@name' => $new_widget->name,
              )), 'status');
          $data['look_and_feel']['stackla_id'] = $new_widget->id;
          $data['look_and_feel']['embed_code'] = $new_widget->embed_code;
        }
        else {

          drupal_set_message(t('Unable to create widget: @error', array(
            '@error' => implode(', ', $new_widget->getErrors()),
              )), 'error');
        }
      }
    }

    // Serialise the changed data and store.
    $items[$item_delta]['widget_data'] = serialize($data);
  }
}

function stackla_field_create_stackla_widget($data) {
  $look_and_feel = $data['look_and_feel'];
  switch ($look_and_feel['look_options']) {
    case 'new':
      if (stackla_field_widget_data_validate($look_and_feel)) {
        $widget_to_send = stackla_field_prepare_widget($data);
        $new_widget = stackla_create_widget($widget_to_send);
        return $new_widget;
      }
      break;
  }
}

/**
 *
 * Validate submitted widget data.
 * @param type $look_and_feel
 * @return boolean
 */
function stackla_field_widget_data_validate($look_and_feel) {
  if (empty($look_and_feel['details']['type_style'])) {
    return FALSE;
  }
  return TRUE;
}

function stackla_field_prepare_widget($data) {
  $look_and_feel = $data['look_and_feel'];
  $prepared = array();

  $prepared['name'] = $data['name'];
  // Type is hard coded to fluid (for now).
  $prepared['type'] = 'fluid';

  $prepared['type_style'] = $look_and_feel['details']['type_style'];
  // Get first element in filter menu array.
  $filter_values = array_values($data['filter_menu']);
  $filter = array_shift($filter_values);
  $prepared['filter_id'] = $filter['stackla_id'];

  return $prepared;
}

/**
 * Create a new filter in Stackla.
 *
 * @param array $filter
 */
function stackla_field_create_filter($filter) {
  $stackla_filter = stackla_field_prepare_filter($filter);
  if ($new_filter = stackla_create_filter($stackla_filter)) {
    if ($new_filter->id) {
      drupal_set_message(t('New filter @filter created in Stackla', array(
        '@filter' => $filter['title'],
      )));
    }
    else {
      // Log error, set message.
      drupal_set_message(t('Unable to create filter @filter', array(
        '@filter' => $filter['title'],
          )), 'error');
    }
  }
  return $new_filter;
}

function stackla_field_tag_prepare($tag_name) {
  $tag = array();
  $tag['tag'] = $tag_name;
  $tag['type'] = 'content';
  $tag['publicly_visible'] = 1;


  return $tag;
}

/**
 * Implements hook_field_insert().
 */
function stackla_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $item_delta => $item) {
    $data = unserialize($item['widget_data']);

    // If there is any data, create a new tag keyed by entity type and id.
    if (!empty($data['terms']) || !empty($data['filter_menu']) || !empty($data['look_and_feel'])) {
      // Create tag.
      $entity_ids = entity_extract_ids($entity_type, $entity);
      $tag_name = $entity_type . '-' . $entity_ids[0];
      $tag_to_create = stackla_field_tag_prepare($tag_name);

      $new_tag = stackla_create_tag($tag_to_create);

      if ($new_tag->id) {
        $data['tag_id'] = $new_tag->id;
        drupal_set_message(t('Created tag @tag', array(
          '@tag' => $new_tag->tag,
            )), 'status');
      }
      else {
        $errors = $new_tag->getErrors();
        drupal_set_message(t('unable to create new tag: @error', array(
          '@error' => implode(', ', $errors),
            )), 'error');
      }
    }

    // Process new terms.
    if (!empty($data['terms'])) {
      foreach ($data['terms'] as $term_delta => $term) {
        if (stackla_field_term_data_validate($term)) {
          // Add the tagid for the entity
          $term['tag_id'] = $data['tag_id'];
          // submit the term to Stackla.
          if ($new_term = stackla_create_term($term)) {
            // Add the returned ID to the widget data.
            $data['terms'][$term_delta]['stackla_id'] = $new_term->id;
            drupal_set_message(t('New term @term created in Stackla', array(
              '@term' => $term['name'],
            )));
          }
          else {
            // Log error, set message.
            drupal_set_message(t('Unable to create term @term', array(
              '@term' => $term['name'],
                )), 'error');
          }
        }
      }
    }

    if (!empty($data['filter_menu'])) {
      foreach ($data['filter_menu'] as $filter_delta => $filter) {
        if (stackla_field_filter_validate($filter)) {
          $filter['tag_id'] = $data['tag_id'];
          $stackla_filter = stackla_field_prepare_filter($filter);
          if ($new_filter = stackla_create_filter($stackla_filter)) {
            if ($new_filter->id) {
              $data['filter_menu'][$filter_delta]['stackla_id'] = $new_filter->id;
              drupal_set_message(t('New filter @filter created in Stackla', array(
                '@filter' => $filter['title'],
              )));
            }
            else {
              // Log error, set message.
              drupal_set_message(t('Unable to create filter @filter', array(
                '@filter' => $filter['title'],
                  )), 'error');
            }
          }
        }
      }
    }

    //Widget!
    if (!empty($data['look_and_feel']) && !empty($data['look_and_feel']['look_options'])) {
      // No stackla id, so we need to create a new widget.
      $new_widget = stackla_field_create_stackla_widget($data);
      if ($new_widget->id) {
        drupal_set_message(t('Created Widget @name in Stackla', array(
          '@name' => $new_widget->name,
            )), 'status');
        $data['look_and_feel']['stackla_id'] = $new_widget->id;
        $data['look_and_feel']['embed_code'] = $new_widget->embed_code;
      }
      else {

        drupal_set_message(t('Unable to create widget: @error', array(
          '@error' => implode(', ', $new_widget->getErrors()),
            )), 'error');
      }
    }
    // Serialise the changed data and store.
    $items[$item_delta]['widget_data'] = serialize($data);
  }
}

/**
 * Takes a filter array from the field and convert to a
 * format ready to send to Stackla.
 */
function stackla_field_prepare_filter($filter) {
  $stackla_filter = array(
    'name' => $filter['title'],
    'networks' => array_values($filter['networks']),
    'media' => array_values($filter['show_media']),
    'sort' => $filter['sort'],
    'tag_id' => $filter['tag_id'],
  );

  if (!empty($filter['stackla_id'])) {
    $stackla_filter['stackla_id'] = $filter['stackla_id'];
  }

  return $stackla_filter;
}

function stackla_field_filter_validate($filter) {
  if (empty($filter['title'])) {
    return FALSE;
  }

  if (empty($filter['sort'])) {
    return FALSE;
  }

  if (empty($filter['show_media'])) {
    return FALSE;
  }

  if (empty($filter['networks'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Utility function: validate a submitted term.
 * @param type $term
 */
function stackla_field_term_data_validate($term) {

  // Term must have a name.
  if (empty($term['name'])) {
    return FALSE;
  }

  // Term must have a network
  if (empty($term['network'])) {
    return FALSE;
  }

  if (empty($term['value'])) {
    return FALSE;
  }

  if (empty($term['type'])) {
    return FALSE;
  }

  return TRUE;
}
