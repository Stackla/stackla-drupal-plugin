<?php

/**
 * @file: Stackla Field functions.
 */

/**
 * Implements hook_field_info().
 */
function stackla_field_field_info() {
  $data = array(
    'stackla_field' => array(
      'label' => t('Stackla Widget'),
      'description' => t('Stackla Widget'),
      'default_widget' => 'stackla_field_widget',
      'default_formatter' => 'stackla_field_widget_formatter',
    ),
  );
  return $data;
}

/**
 * Implements hook_field_widget_info().
 */
function stackla_field_field_widget_info() {
  return array(
    'stackla_field_widget' => array(
      'label' => t('Stackla Field widget'),
      'field types' => array('stackla_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function stackla_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['widget_data']) ? unserialize($items[$delta]['widget_data']) : array();
  $widget = $element;
  $widget['#delta'] = $delta;

  if ($instance['widget']['type'] == 'stackla_field_widget') {

    // Make this a fieldset with the three text fields.
    $widget += array(
      '#type' => 'fieldset',
      '#element_validate' => array('stackla_field_element_validate'),
      // #delta is set so that the validation function will be able
      // to access external value information which otherwise would be
      // unavailable.
      '#delta' => $delta,
    );


    $widget['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => (!empty($value['name'])) ? $value['name'] : '',
    );

    $widget['social_queries'] = array(
      '#type' => 'fieldset',
      '#title' => 'Social Queries',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      '#prefix' => '<div id="st-sq-fieldset">',
      '#suffix' => '</div>'
    );

    $social_type_options = array(
      '0' => t('Select Source...'),
      'twitter_user' => t('Twitter user'),
      'instagram_hashtag' => t('Instagram hashtag'),
    );

    $widget['social_queries'][0]['type'] = array(
      '#type' => 'select',
      '#options' => $social_type_options,
      '#default_value' => (!empty($value['social_queries'][0]['type'])) ? $value['social_queries'][0]['type'] : 0,
      '#ajax' => array(
        'callback' => 'stackla_field_ajax_social_callback',
        'wrapper' => 'st-sq-fieldset',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    $widget['social_queries'][0]['value'] = array(
      '#type' => 'textfield',
      '#default_value' => (!empty($value['social_queries'][0]['value'])) ? $value['social_queries'][0]['value'] : '',
    );

    if (empty($value['social_queries'][0]['value'])) {
      $widget['social_queries'][0]['value']['#attributes'] = array(
        'placeholder' => t('Enter value'),
      );
    }

    $widget['social_queries'][0]['remove'] = array(
      '#type' => 'button',
      '#value' => t('Remove'),
    );

    $widget['social_queries']['add'] = array(
      '#type' => 'button',
      '#value' => t('Add new'),
    );

    $widget['filter_menu'] = array(
      '#type' => 'fieldset',
      '#title' => 'Filter Menu',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      '#prefix' => '<div id="st-fm-fieldset">',
      '#suffix' => '</div>'
    );

    $widget['filter_menu'][0]['name'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('Add new menu item'),
      ),
    );

    $widget['look_and_feel'] = array(
      '#type' => 'fieldset',
      '#title' => 'Look and Feel',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      '#prefix' => '<div id="st-lf-fieldset">',
      '#suffix' => '</div>'
    );
  }

  //add a submit handler to serialise the submitted data
  $form['#submit'][] = 'stackla_field_field_widget_submit';

  $element['widget_data'] = $widget;
  return $element;
}

function stackla_field_ajax_social_callback($form,&$form_state) {
  return $form['social_queries'];
}

function stackla_field_field_widget_submit($form, &$form_state) {
  //serialise all gathered data to store
  dpm($form_state);
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function stackla_field_field_is_empty($item, $field) {
  return empty($item['widget_data']);
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
function stackla_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['widget_data'])) {
      //@todo: validate field data.
    }
  }
}

/**
 * Take all the values from the widget form and serialise them to store.
 */
function stackla_field_element_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['widget_data'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['widget_data'];
    $value = serialize($values);
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function stackla_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'stackla_field_widget_formatter' => array(
      'label' => t('Stackla widget'),
      'field types' => array('stackla_field'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function stackla_field_theme($existing, $type, $theme, $path) {
  return array(
    'stackla_field' => array(
      'variables' => array(),
      'template' => 'templates/stackla_field'
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function stackla_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // Stackla field outputter.
    case 'stackla_field_widget_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'stackla_field',
        );
      }
      break;
  }

  return $element;
}
