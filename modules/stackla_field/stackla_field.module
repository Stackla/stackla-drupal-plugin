<?php

/**
 * @file: Stackla Field functions.
 */

/**
 * Implements hook_field_info().
 */
function stackla_field_field_info() {
  $data = array(
    'stackla_field' => array(
      'label' => t('Stackla Widget'),
      'description' => t('Stackla Widget'),
      'default_widget' => 'stackla_field_widget',
      'default_formatter' => 'stackla_field_widget_formatter',
    ),
  );
  return $data;
}

/**
 * Implements hook_field_widget_info().
 */
function stackla_field_field_widget_info() {
  return array(
    'stackla_field_widget' => array(
      'label' => t('Stackla Field widget'),
      'field types' => array('stackla_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function stackla_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['widget_data']) ? unserialize($items[$delta]['widget_data']) : array();
  $widget = $element;
  $widget['#delta'] = $delta;

  if ($instance['widget']['type'] == 'stackla_field_widget') {

    $widget += array(
      '#type' => 'fieldset',
      '#element_validate' => array('stackla_field_element_validate'),
      // #delta is set so that the validation function will be able
      // to access external value information which otherwise would be
      // unavailable.
      '#delta' => $delta,
      '#prefix' => '<div id="st-fieldset">',
      '#suffix' => '</div>',
      '#process' => array('stackla_field_widget_element_process'),
      //'#submit' => array('stackla_field_field_widget_submit'),
    );


    $widget['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => (!empty($value['name'])) ? $value['name'] : '',
    );

    $widget['social_queries'] = array(
      '#type' => 'fieldset',
      '#title' => 'Social Queries',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
    );

    $field_name = $field['field_name'];
    if (!empty($form_state['values'][$field_name]['und'][$delta]['widget_data'])) {
      $submitted_data = unserialize($form_state['values'][$field_name]['und'][$delta]['widget_data']);
      $social_elements = stackla_field_social_elements($submitted_data, $form_state);
      $filter_elements = stackla_field_filters($submitted_data, $form_state);
    }
    else {
      $social_elements = stackla_field_social_elements($value, $form_state);
      $filter_elements = stackla_field_filters($value, $form_state);
    }
    $widget['social_queries'] += $social_elements;

    $widget['filter_menu'] = array(
      '#type' => 'fieldset',
      '#title' => 'Filter Menu',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
    );

    $widget['filter_menu'] += $filter_elements;

    $widget['look_and_feel'] = array(
      '#type' => 'fieldset',
      '#title' => 'Look and Feel',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,

    );

    $widget['look_and_feel']['look_options'] = array(
      '#type' => 'radios',
      '#options' => array(
        'Option 1',
        'Option 2',
        'Option 3',
      ),
    );
  }

  //add a submit handler to serialise the submitted data
  $form['#submit'][] = 'stackla_field_field_widget_submit';

  $element['widget_data'] = $widget;
  return $element;
}

function stackla_field_widget_element_process($element,&$form_state) {
  //dpm($element,'element in element process');
  //dpm($form_state,'form state in element process');

  return $element;
}

/**
 * Generate the filters widget form elements.
 * @param array $values
 *  the existing filter values
 * @param type $form_state
 *  The drupal $form_state (with'values' if this is an ajax rebuild).
 * @return string
 */
function stackla_field_filters($values, $form_state) {
  $elements = array();

  $highest_key = 0;

  // Check if a 'remove' button has been clicked
  $remove_index = 'empty';
  if (!empty($form_state['clicked_button'])) {
    $name_elements = explode('-', $form_state['clicked_button']['#name']);
    if ($name_elements[0] == 'filter') {
      $remove_index = intval($name_elements[2]);
    }
  }

  if (!empty($values['filter_menu'])) {
    $new_key = 0;
    foreach ($values['filter_menu'] as $key => $filter) {
      if ($new_key > $highest_key) {
        $highest_key = $new_key;
      }
      if (!empty($filter['title']) && ($key !== $remove_index)  ) {
        $elements += stackla_field_filter_element($new_key, $filter);
        $elements[$new_key]['remove'] = array(
          '#type' => 'button',
          '#value' => t('Remove filter'),
          '#name' => 'filter-remove-' . $new_key,
          '#ajax' => array(
            'callback' => 'stackla_field_ajax_social_callback',
            'wrapper' => 'st-fieldset',
            'method' => 'replace',
            'effect' => 'fade',
          ),
        );
        $new_key++;
      }
    }
  }

  if (empty($elements[$highest_key]['title']['#default_value'])) {
    $elements += stackla_field_filter_element($highest_key, array());
  }

  $highest_key ++;
  $elements[$highest_key]['add_new'] = array(
    '#type' => 'button',
    '#value' => t('Add new filter'),
    '#name' => 'filter_add_new',
    '#ajax' => array(
      'callback' => 'stackla_field_ajax_social_callback',
      'wrapper' => 'st-fieldset',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $elements;
}

/**
 *  Generate a single filter form element.
 * @param string $key
 *  the delta key
 * @param array $filter
 *  existing filter data (for populating default form values).
 * @return array
 *  the complete form element render array.
 */
function stackla_field_filter_element($key, $filter) {
  $elements = array();

  $elements[$key] = array(
    '#type' => 'fieldset',
  );

  //title
  $elements[$key]['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => (!empty($filter['title'])) ? $filter['title'] : '',
  );


  //sort by
  $elements[$key]['sort_by'] = array(
    '#type' => 'select',
    '#options' => array(
      'date_latest' => t('Date - Latest first'),
      'another_option' => t('Another option'),
    ),
    '#default_value' => (!empty($filter['sort_by'])) ? $filter['sort_by'] : '',
  );

  // show media
  $elements[$key]['show_media'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Show Media'),
    '#options' => array(
      'text' => t('Text only'),
      'images' => t('Images'),
      'video' => t('Video'),
    ),
    '#default_value' => (!empty($filter['show_media'])) ? $filter['show_media'] : array(),
  );

  // networks
  $elements[$key]['networks'] = array(
    '#title' => t('Networks'),
    '#type' => 'checkboxes',
    '#options' => array(
      'twitter' => t('Twitter'),
      'instagram' => t('Instagram'),
      'facebook' => t('Facebook'),
      'google_plus' => t('Google+'),
      'youtube' => t('YouTube'),
    ),
    '#default_value' => (!empty($filter['networks'])) ? $filter['networks'] : array(),
  );

  return $elements;
}

/**
 * Build social form elements from existing data.
 * @param array $values
 */
function stackla_field_social_elements($values, $form_state) {

  $social_type_options = array(
    'twitter_user' => t('Twitter User'),
    'twitter_keyword_search' => t('Twitter Keyword Search'),
    'instagram_hashtag' => t('Instagram Hashtag'),
    'instagram_user' => t('Instagram User'),
    'facebook_page' => t('Facebook Page'),
    'youtube_user' => t('YouTube User'),
    'youtube_keyword_search' => t('YouTube Keyword Search'),
    'googleplus_user' => t('Google+ User'),
  );
  $initial_social_options = array(
    '0' => t('Select Source...'),
  );
  $initial_social_options += $social_type_options;

  // Check if a 'remove' button has been clicked
  $remove_index = 'empty';
  if (!empty($form_state['clicked_button'])) {
    $name_elements = explode('-', $form_state['clicked_button']['#name']);
    if ($name_elements[0] == 'social') {
      $remove_index = intval($name_elements[2]);
    }
  }

  $elements = array();
  $highest_key = 0;
  if (!empty($values['social_queries'])) {
    foreach ($values['social_queries'] as $key => $query) {
      if ($key > $highest_key) {
        $highest_key = $key;
      }
      if (!empty($query['type']) && $query['type'] != '0') {
        if ($key !== $remove_index) {
          $elements[$key] = array(
            '#type' => 'fieldset',
          );
          $elements[$key]['type'] = array(
            '#type' => 'select',
            '#options' => $social_type_options,
            '#default_value' => (!empty($query['type'])) ? $query['type'] : 0,
            '#ajax' => array(
              'callback' => 'stackla_field_ajax_social_callback',
              'wrapper' => 'st-fieldset',
              'method' => 'replace',
              'effect' => 'fade',
            ),
          );
          $elements[$key]['value'] = array(
            '#type' => 'textfield',
            '#default_value' => (!empty($query['value'])) ? $query['value'] : '',
          );
          if (empty($query['value'])) {
            $elements[$key]['value']['#attributes'] = array(
              'placeholder' => t('Enter value'),
            );
          }
          $elements[$key]['remove'] = array(
            '#type' => 'button',
            '#value' => t('Remove'),
            '#name' => 'social-remove-' . $key,
            '#ajax' => array(
              'callback' => 'stackla_field_ajax_social_callback',
              'wrapper' => 'st-fieldset',
              'method' => 'replace',
              'effect' => 'fade',
            ),
          );
        }
      }
    }
  }

  $new_select = array(
    'type' => array(
      '#type' => 'select',
      '#options' => $initial_social_options,
      '#default_value' => 0,
      //'#name' => 'stackla_social_new',
      '#ajax' => array(
        'callback' => 'stackla_field_ajax_social_callback',
        'wrapper' => 'st-fieldset',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    ),
  );
  $elements[$highest_key + 1] = $new_select;
  return $elements;
}


function stackla_field_ajax_social_callback($form, &$form_state) {
  // gets an array of the path of the triggering element.
  $parents = $form_state['triggering_element']['#array_parents'];

  // removes the triggering element name.
  array_pop($parents);
  array_pop($parents);
  array_pop($parents);

  // turns the array into a path on $form - i.e. $form['field_name']['und'][0]['your_element_name'];
  $element = drupal_array_get_nested_value($form, $parents);
  return $element;
}

function stackla_field_field_widget_submit($form, &$form_state) {
  dpm('#submit');
  //dpm($form,'form on submit');
  //dpm($form_state,'form state on submit');

  //@todo: API interaction should happen here.
  // submit filter data to API, generate filter ids to store.
  // submit queries to API, generate query ids to store.
  // submit widget info to API, generate widget embed code to store. (??)
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function stackla_field_field_is_empty($item, $field) {
  return empty($item['widget_data']);
}

/**
 * Implements hook_field_validate().
 */
function stackla_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['widget_data'])) {
      //@todo: validate field data.
    }
  }
}

/**
 * Field element validation.
 */
function stackla_field_element_validate($element, &$form_state) {
  dpm($element,'element in element_validate');
  dpm($form_state,'form state in element_validate');
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  // Trying to add a new filter or query without setting the node name will
  // trigger a validation error.
  // Hack around this by setting the node title to the same as the widget title
  // if it's not already set.
  $errors = form_get_errors();
  if (!empty($errors['title']) && !empty($form_state['values'][$field_name][$element['#language']][$delta]['widget_data']['name'])) {
    stackla_field_filter_errors('title');
    $form_state['values']['title'] = $form_state['values'][$field_name][$element['#language']][$delta]['widget_data']['name'];
  }
  // Serialise the form data for storage.
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['widget_data'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['widget_data'];
    $value = serialize($values);
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Helper function, filter reset form errors for a specific message.
 *  @param string $element_name
 *    The name of the element to filter.
 */
function stackla_field_filter_errors($element_name) {
  $errors = form_get_errors();
  if ($errors) {
    // Clear errors.
    form_clear_error();
    // Clear error messages.
    $error_messages = drupal_get_messages('error');
    // Initialize an array where removed error messages are stored.
    $removed_messages = array();

    // Remove all errors originated by the 'foo][bar' element.
    foreach ($errors as $name => $error_message) {
      if ($name == $element_name) {
        $removed_messages[] = $error_message;
        unset($errors[$name]);
      }
    }

    // Reinstate remaining errors.
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
      // form_set_error() calls drupal_set_message(), so we have to filter out
      // these from the error messages as well.
      $removed_messages[] = $error;
    }

    // Reinstate remaining error messages (which, at this point, are messages that
    // were originated outside of the validation process).
    foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function stackla_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'stackla_field_widget_formatter' => array(
      'label' => t('Stackla widget'),
      'field types' => array('stackla_field'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function stackla_field_theme($existing, $type, $theme, $path) {
  return array(
    'stackla_field' => array(
      'variables' => array(
        'data' => array(),
        'field_id' => 0,
      ),
      'template' => 'templates/stackla_field'
    ),
    'stackla_field_filters' => array(
      'variables' => array(
        'filters' => array(),
        'field_id' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_stackla_field().
 */
function stackla_field_preprocess_stackla_field(&$vars) {
  if (!empty($vars['data']['filter_menu'])) {
    $vars['filters'] = array(
      '#theme' => 'stackla_field_filters',
      '#filters' => $vars['data']['filter_menu'],
      '#field_id' => $vars['field_id'],
    );
  }
  drupal_add_css(drupal_get_path('module', 'stackla_field') . '/css/stackla_field.css');
}

/**
 * Filters list theme function.
 */
function theme_stackla_field_filters($variables) {
  $output = array();
  $list_class = '.stackla-filter-list.stackla-id-' . $variables['field_id'];
  $js = 'jQuery(\'' . $list_class . ' a\').click(function(){
    var filter = $(this).parent();
    StacklaFluidWidget.changeFilter(window.widgetId, filter.attr(\'data-filter\'));
});';


  $filters = $variables['filters'];
  $filter_list_elements = array();
  foreach ($filters as $delta => $filter) {
    if (!empty($filter['title'])) {
      // Generate a random filter id for now, replace this with actual data
      // once the SDK is available.
      $filter_id = $delta;

      // We don't use l() here because we don't want an href attribute on the
      // <a> tag.
      $filter_list_elements[] = sprintf('<a data-filter-id="%s">%s</a>', $filter_id, t($filter['title'])
      );
    }
  }
  if (!empty($filter_list_elements)) {
    $output = array(
      '#theme' => 'item_list',
      '#items' => $filter_list_elements,
      '#attributes' => array(
        'class' => array('stackla-filter-list stackla-id-' . $variables['field_id']), //add id here!
      ),
      // add attached js here.
      '#attached' => array(
        'js' => array(
          $js => array(
            'type' => 'inline',
            'scope' => 'footer',
          ),
        ),
        'css' => array(drupal_get_path('module', 'stackla_field') . '/css/stackla_field_filters.css'),
      ),
    );
  }

  $rendered_output = drupal_render($output);
  return $rendered_output;
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function stackla_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $entity_id = entity_extract_ids($entity_type, $entity);
  $element = array();

  switch ($display['type']) {
    // Stackla field outputter.
    case 'stackla_field_widget_formatter':
      foreach ($items as $delta => $item) {
        $data = unserialize($item['widget_data']);
        $element[$delta] = array(
          '#theme' => 'stackla_field',
          '#data' => $data,
          '#field_id' => $entity_id[0] . $delta,
        );
      }
      break;
  }

  return $element;
}
/**
 * Implements hook_field_update().
 */
function stackla_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  //dpm($field,'field in update');
  if(!empty($field['type']) && $field['type'] == 'stackla_field') {

    dpm($items,'items of the stackla field');
    foreach($items as $item_delta => $item) {
      $data = unserialize($item['widget_data']);
      dpm($data,'unserialised data');
      if(!empty($data['social_queries'])) {
        foreach ($data['social_queries'] as $social_query_delta => $social_query) {
          if(!empty($social_query['title'])) {
            if(empty($social_query['term_id'])) {
              // No ID is set for this social query, so we create a new term.
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function stackla_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {

}